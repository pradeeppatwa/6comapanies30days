Print Anagrams Together
Given an array of strings, return all groups of strings that are anagrams. 
The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
    map<string, vector<string>>m;
    
    for(int i=0;i<string_list.size();i++)
    {
        string s=string_list[i];
        sort(s.begin(), s.end());
        
        m[s].push_back(string_list[i]);
    }
    
    
    vector<vector<string> > v;
    
    for(auto i:m)
    {
        v.push_back(i.second);
    }
    
    return v;
    }
};



algorithm:
1. create map and vector for storing sorted and all similar anagrams.
2. run for loop for all words in string_list and sort one word and add all the similar words
like words[] = {act,god,cat,dog,tac}
sort act -> act , cat , tac
     dgo -> god , dog
3. for map m push word of i=0 i.e act and print it
  similarly i=1 i.e dgo push in v (i.second) give the value 
4. return v

Input:
N = 5
words[] = {act,god,cat,dog,tac}

Output: 
god dog
act cat tac


Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.
